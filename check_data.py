import pyarrow.parquet as pq
import pandas as pd
import glob
import os

print("--- –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö ---")

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ–∑–¥–∞–Ω–Ω—ã–π parquet-—Ñ–∞–π–ª
try:
    list_of_files = glob.glob('data/merged/*.parquet')
    if not list_of_files:
        print("‚ùå –û—à–∏–±–∫–∞: Parquet-—Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ 'data/merged/'.")
        exit()
    latest_file = max(list_of_files, key=os.path.getctime)
    parquet_path = latest_file
    print(f"üîé –ü—Ä–æ–≤–µ—Ä—è–µ–º—ã–π —Ñ–∞–π–ª: {parquet_path}")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ñ–∞–π–ª–∞: {e}")
    exit()

# –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ–∂–∏–¥–∞–µ–º—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (–≤ —Ç–æ—á–Ω–æ—Å—Ç–∏ –∫–∞–∫ –≤ FeatureSnapshot)
expected_features = [
    'ts', 'price', 'qty', 'side', 'target', 'mid_price', 'avg_price',
    'trade_count', 'buy_volume', 'sell_volume', 'buy_sell_ratio',
    'direction', 'reason', 'bid_volume', 'ask_volume', 'bid_volume_near',
    'ask_volume_near', 'imbalance', 'buy_vol_speed', 'sell_vol_speed',
    'price_std', 'ma_volume', 'volatility', 'activity_spike',
    'bid_volume_pct_025', 'ask_volume_pct_025', 'imbalance_pct_025',
    'bid_density_lvl1_3', 'ask_density_lvl1_3', 'orderbook_entropy',
    'orderbook_roc', 'is_spoofing_like', 'has_fake_wall'
]

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
try:
    df = pd.read_parquet(parquet_path)
    print(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω. {len(df)} —Å—Ç—Ä–æ–∫, {len(df.columns)} –∫–æ–ª–æ–Ω–æ–∫.")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {parquet_path}: {e}")
    exit()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
print("\n--- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ ---")
df_columns = set(df.columns)
missing_features = [f for f in expected_features if f not in df_columns]

if missing_features:
    print('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø—Ä–∏–∑–Ω–∞–∫–∏:', missing_features)
else:
    print('‚úÖ –í—Å–µ –æ–∂–∏–¥–∞–µ–º—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç')

print("\n--- –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã–º –ø—Ä–∏–∑–Ω–∞–∫–∞–º ---")
# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ –∏ –±–∞–∑–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
features_to_check = [
    'bid_volume_pct_025', 'orderbook_entropy', 'is_spoofing_like', 
    'has_fake_wall'
]

for f in features_to_check:
    if f in df_columns:
        print(f'–ü—Ä–∏–∑–Ω–∞–∫: {f}')
        print(f'  - –¢–∏–ø: {df[f].dtype}')
        print(f'  - –ü—Ä–æ–ø—É—Å–∫–∏: {df[f].isnull().sum()} / {len(df)}')
        if pd.api.types.is_numeric_dtype(df[f]):
            print(f'  - –ú–∏–Ω/–ú–∞–∫—Å: {df[f].min()} / {df[f].max()}')
        else:
            print(f'  - –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: {df[f].unique()[:5]}')
        print('------')

print("\n--- –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω ---") 